# Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
#
# NVIDIA CORPORATION, its affiliates and licensors retain all intellectual
# property and proprietary rights in and to this material, related
# documentation and any modifications thereto. Any use, reproduction,
# disclosure or distribution of this material and related documentation
# without an express license agreement from NVIDIA CORPORATION or
# its affiliates is strictly prohibited.
#
import argparse
from typing import Tuple

from mindmap_osmo.workflow_utils.workflow_constants import (
    CHECKPOINT_DATASET_NAME,
    DEFAULT_PLATFORM,
    SWIFT_BROWSEABLE_URL,
)
from mindmap_osmo.workflow_utils.workflow_types import OsmoWorkflowType, PlatformType


def get_workflow_args(
    osmo_workflow_type: OsmoWorkflowType, input_args: list[str]
) -> Tuple[argparse.Namespace, list[str]]:
    """Get the workflow arguments from the CLI arguments."""
    # Get a parser for the workflow arguments.
    workflow_argparser = get_workflow_argparser(osmo_workflow_type)

    # Parse the workflow arguments and return the remaining CLI arguments.
    workflow_args, extra_args = workflow_argparser.parse_known_args(input_args)

    return workflow_args, extra_args


def get_workflow_argparser(osmo_workflow_type: OsmoWorkflowType) -> argparse.ArgumentParser:
    """Get the workflow argument parser. Setting up default arguments for the workflow type."""
    parser = argparse.ArgumentParser(
        description="Generate an OSMO training workflow YAML.", allow_abbrev=False
    )
    parser.add_argument(
        "--platform",
        default=get_default_platform(osmo_workflow_type),
        type=PlatformType,
        help="Platform",
    )
    parser.add_argument("--image_tag", default="latest", type=str, help="Image tag")
    parser.add_argument(
        "--osmo_dataset_note", default="Placeholder note", type=str, help="OSMO dataset note"
    )
    parser.add_argument(
        "--upload_e2e_dataset",
        action="store_true",
        help="Upload the dataset generated by the E2E workflow to an OSMO dataset",
    )
    parser.add_argument("-d", "--dry-run", action="store_true", help="Dry run the workflow")
    parser.add_argument(
        "--output_dataset_name", default=None, help="Override default output dataset name"
    )
    parser.add_argument(
        "--input_dataset_name", default=None, help="Override default input dataset name"
    )
    parser.add_argument(
        "--input_dataset_version",
        type=int,
        default=None,
        help="Override default input dataset version",
    )
    parser.add_argument("--prefix", default=None, type=str, help="Prefix for the workflow name")
    parser.add_argument(
        "--checkpoint_from_swiftstack",
        action="store_true",
        help=f"Use checkpoint from swiftstack instead of dataset. The provided checkpoint should be relative to {SWIFT_BROWSEABLE_URL}/{CHECKPOINT_DATASET_NAME}/ ",
    )
    return parser


def get_default_platform(workflow_type: OsmoWorkflowType) -> PlatformType:
    """Get default platform for given workflow type."""
    assert workflow_type.name in DEFAULT_PLATFORM, f"Invalid workflow type: {workflow_type}"
    return DEFAULT_PLATFORM[workflow_type.name]
